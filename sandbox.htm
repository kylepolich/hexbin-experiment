<html>
<head>
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="d3.hexbin.min.js"></script>
</head>
<body>
<style>

.axis text {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.hexagon {
  fill: none;
  stroke: #000;
  stroke-width: .5px;
}

</style>

    <div id='hex'></div>
    <div id='scatter'></div>

<script>

var margin = {top: 20, right: 20, bottom: 30, left: 40},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var randomX = d3.random.normal(width / 2, 80),
    randomY = d3.random.normal(height / 2, 80),
    points = d3.range(2000).map(function() { return [randomX(), randomY()]; });

dmin=0; dmax=0; rmin=0; rmax=0
for (p in points) {
  point = points[p]
  x = point[0]
  y = point[1]
  if (x < dmin) dmin = x
  if (x > dmax) dmax = x
  if (y < rmin) rmin = y
  if (y > rmax) rmax = y
}
console.log([dmin, dmax, rmin, rmax])


var hexbin = false
var scatter = true

var x = d3.scale.identity()
    .domain([0, width]);

var y = d3.scale.linear()
    .domain([0, height])
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickSize(6, -height);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .tickSize(6, -width);

if (hexbin) {
  var color = d3.scale.linear()
      .domain([0, 20])
      .range(["white", "steelblue"])
      .interpolate(d3.interpolateLab);

  var hexbin = d3.hexbin()
      .size([width, height])
      .radius(20);

  var svg = d3.select("#hex").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  svg.append("clipPath")
      .attr("id", "clip")
    .append("rect")
      .attr("class", "mesh")
      .attr("width", width)
      .attr("height", height);

  svg.append("g")
      .attr("clip-path", "url(#clip)")
    .selectAll(".hexagon")
      .data(hexbin(points))
    .enter().append("path")
      .attr("class", "hexagon")
      .attr("d", hexbin.hexagon())
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
      .style("fill", function(d) { return color(d.length); });

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);
}

if (scatter) {
  var svg = d3.select("#scatter").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  svg.append("clipPath")
      .attr("id", "clip")
    .append("rect")
      .attr("class", "mesh")
      .attr("width", width)
      .attr("height", height);

  svg.append("g")
    .selectAll(".hexagon")
      .data(points)
    .enter().append("circle")
      .attr("r", 3)
      .attr("cx", function(d) {return d[0]})
      .attr("cy", function(d) {return d[1]})
      .style("fill", function(d) { return "rgba(0,0,0,.1)"; });

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);
}

</script>
